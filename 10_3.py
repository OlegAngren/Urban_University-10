import threading  # Импортируем модуль для работы с потоками
from random import randint  # Импортируем функцию для генерации случайных чисел
from time import sleep  # Импортируем функцию для задержки


# Определяем класс Bank
class Bank:
    def __init__(self):
        """
        Инициализация банка с начальными атрибутами.
        """
        self.balance = 0  # Баланс банка
        self.lock = threading.Lock()  # Объект блокировки потоков

    def deposit(self):
        """
        Метод для пополнения баланса.
        Выполняет 100 транзакций с рандомными суммами.
        """
        for _ in range(100):
            amount = randint(50, 500)  # Случайное число от 50 до 500
            with self.lock:  # Блокируем доступ к балансу
                self.balance += amount  # Увеличиваем баланс
                print(f"Пополнение: {amount}. Баланс: {self.balance}")

                # Если баланс больше или равен 500 и замок закрыт, разблокируем его
                if self.balance >= 500 and self.lock.locked():
                    self.lock.release()

            sleep(0.001)  # Задержка для имитации скорости выполнения

    def take(self):
        """
        Метод для снятия средств.
        Выполняет 100 транзакций с рандомными суммами.
        """
        for _ in range(100):
            amount = randint(50, 500)  # Случайное число от 50 до 500
            print(f"Запрос на {amount}")

            with self.lock:  # Блокируем доступ к балансу
                if amount <= self.balance:  # Если средств достаточно
                    self.balance -= amount  # Уменьшаем баланс
                    print(f"Снятие: {amount}. Баланс: {self.balance}")
                else:
                    print("Запрос отклонён, недостаточно средств")
                    self.lock.acquire()  # Блокируем поток, если средств недостаточно

            sleep(0.001)  # Задержка для имитации скорости выполнения


# Основная программа
if __name__ == "__main__":
    # Создаем объект банка
    bk = Bank()

    # Создаем потоки для методов deposit и take
    th1 = threading.Thread(target=Bank.deposit, args=(bk,))
    th2 = threading.Thread(target=Bank.take, args=(bk,))

    # Запускаем потоки
    th1.start()
    th2.start()

    # Ожидаем завершения потоков
    th1.join()
    th2.join()

    # Выводим итоговый баланс
    print(f"Итоговый баланс: {bk.balance}")


""" Класс Bank:

Атрибуты:
balance: Баланс банка, начальное значение — 0.
lock: Объект threading.Lock, который управляет доступом к критической секции (балансу).

Методы:
depositВыполняет 100 транзакций пополнения баланса на случайные суммы от 50 до 500. Если баланс достигает или превышает 500, поток разблокируется (lock.release).
takeВыполняет 100 транзакций снятия средств на случайные суммы. Если средств недостаточно, поток блокируется (lock.acquire).

Потоки:
Для методов deposit и take создаются два отдельных потока.
Потоки запускаются методом start() и ожидаются методом join().

Блокировка (Lock):
Важный элемент, обеспечивающий корректный доступ к балансу.
with self.lock: Автоматически блокирует и разблокирует доступ к критической секции.
lock.acquire(): Блокирует поток.
lock.release(): Разблокирует поток.

Задержка:
sleep(0.001) добавляет реалистичную задержку выполнения операций."""