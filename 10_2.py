from threading import Thread  # Импортируем класс Thread для работы с потоками
from time import sleep  # Импортируем функцию sleep для задержки

# Создаем класс Knight, наследующийся от Thread
class Knight(Thread):
    # Статический атрибут, общий для всех экземпляров класса
    enemies = 100  # Общее количество врагов, которое уменьшается при сражении

    def __init__(self, name, power):
        """
        Конструктор класса Knight.

        :param name: Имя рыцаря (str)
        :param power: Сила рыцаря (int), указывает, сколько врагов он побеждает за 1 день
        """
        super().__init__()  # Вызываем конструктор родительского класса Thread
        self.name = name  # Имя рыцаря
        self.power = power  # Сила рыцаря

    def run(self):
        """
        Метод, который выполняется при запуске потока.
        Логика сражения рыцаря реализуется здесь.
        """
        print(f"{self.name}, на нас напали!")  # Сообщение о начале битвы
        days = 0  # Счетчик дней сражения

        # Цикл продолжается, пока враги остаются
        while Knight.enemies > 0:
            days += 1  # Увеличиваем количество дней сражения
            # Рыцарь уменьшает количество врагов на величину своей силы
            Knight.enemies -= self.power
            if Knight.enemies < 0:  # Если врагов становится меньше 0, фиксируем 0
                Knight.enemies = 0

            # Сообщение о текущем состоянии битвы
            print(f"{self.name}, сражается {days} день(дня)..., осталось {Knight.enemies} воинов.")
            sleep(1)  # Пауза в 1 секунду, имитирующая 1 день

        # Сообщение о победе рыцаря
        print(f"{self.name} одержал победу спустя {days} день(дня)!")


# Основная программа
if __name__ == "__main__":
    # Создаем двух рыцарей с именами и силой
    first_knight = Knight("Sir Lancelot", 10)  # Рыцарь Ланселот с силой 10
    second_knight = Knight("Sir Galahad", 20)  # Рыцарь Галахад с силой 20

    # Запускаем потоки (рыцари начинают сражаться)
    first_knight.start()
    second_knight.start()

    # Ожидаем завершения каждого потока
    first_knight.join()
    second_knight.join()

    # Сообщение о завершении всех битв
    print("Все битвы закончились!")
